Creating an environment variables template is a crucial step in managing configurations for different environments (development, testing, production, etc.). Below is an example of a `.env.example` file, which typically contains placeholders for the environment variables your application needs.

Here's a generic example for a Node.js application, but this can be customized for any environment:

```plaintext
# Database Configuration
DB_HOST=your_database_host
DB_PORT=your_database_port
DB_USER=your_database_user
DB_PASSWORD=your_database_password
DB_NAME=your_database_name

# Server Configuration
PORT=your_application_port

# API Keys
# Example: Google API Key
GOOGLE_API_KEY=your_google_api_key

# JWT Secret for Authentication
JWT_SECRET=your_jwt_secret

# Email Service (e.g., for sending verification emails or notifications)
EMAIL_SERVICE=your_email_service_provider
EMAIL_USERNAME=your_email_username
EMAIL_PASSWORD=your_email_password
EMAIL_FROM=your_email_from_address

# Payment Gateway Configuration (e.g., Stripe)
STRIPE_SECRET_KEY=your_stripe_secret_key
STRIPE_PUBLIC_KEY=your_stripe_public_key

# Third-party Service Credentials
AWS_ACCESS_KEY_ID=your_aws_access_key_id
AWS_SECRET_ACCESS_KEY=your_aws_secret_access_key
AWS_REGION=your_aws_region

# Feature Toggles
FEATURE_X_ENABLED=false
FEATURE_Y_ENABLED=true

# Logging Level
LOG_LEVEL=info

# Custom Application Variables
APP_NAME=your_app_name
ENVIRONMENT=development # or staging/production

# Redis Configuration (if used for caching)
REDIS_HOST=your_redis_host
REDIS_PORT=your_redis_port
REDIS_PASSWORD=your_redis_password

# Session Configuration
SESSION_SECRET=your_session_secret
```

### Instructions

1. **Copy this template** to a file named `.env.example` in your project root.
2. **Replace the placeholders** with your actual configuration values in your own `.env` file. The `.env` file should not be committed to version control for security reasons.
3. **Use a library** like `dotenv` in Node.js to load these variables into your application:

   ```javascript
   require('dotenv').config();
   ```

4. **Document each variable** as necessary so other developers understand what values are acceptable and what each variable is used for.

5. Ensure sensitive information like passwords and keys are protected using tools such as AWS Secrets Manager, HashiCorp Vault, or similar solutions in production environments.